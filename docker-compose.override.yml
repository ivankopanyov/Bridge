services:
  bridge.fias:
    container_name: bridge_fias
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - TZ=${TZ}
    networks:
      - network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always

  bridge.opera:
    container_name: bridge_opera
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - TZ=${TZ}
    networks:
      - network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always

  bridge.sanatorium:
    container_name: bridge_sanatorium
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - TZ=${TZ}
    networks:
      - network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always

  bridge.fiscal:
    container_name: bridge_fiscal
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - TZ=${TZ}
    networks:
      - network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  bridge.telegrambot:
    container_name: bridge_telegrambot
    environment:
      - DOTNET_ENVIRONMENT=Development
      - TZ=${TZ}
    networks:
      - network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  bridge.hostapi:
    container_name: bridge_hostapi
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=80
      - TZ=${TZ}
    ports:
      - 8080:80
    networks:
      - network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: always

  bridge.spa:
    container_name: bridge_spa
    environment:
      - TZ=${TZ}
    ports:
      - 80:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: always

  postgres:
    container_name: postgres
    environment:
      - TZ=${TZ}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 5s
      retries: 10
    restart: always

  elasticsearch:
    container_name: elasticsearch
    environment:
      - TZ=${TZ}
      - xpack.security.enabled=false
      - discovery.type=single-node
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data:Z
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:9200/_cluster/health?wait_for_status=green || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    restart: always

  rabbitmq:
    container_name: rabbitmq
    environment:
      - TZ=${TZ}
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    networks:
      - network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s
    restart: always

  redis:
    container_name: redis
    environment:
      - TZ=${TZ}
    volumes: 
      - redis:/data
    networks:
      - network
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: always

networks:
  network:
    driver: bridge

volumes:
  postgres:
  elasticsearch:
  rabbitmq:
  redis:
